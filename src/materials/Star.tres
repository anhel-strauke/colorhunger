[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_add;
//render_mode blend_mul;
//render_mode blend_premul_alpha;
//render_mode blend_add, cull_disabled, depth_test_disable;

uniform sampler2D noize;
uniform float time;
uniform vec3 flashDirection;

uniform vec3 color1;
uniform vec3 color2;

uniform float size = 2.0;
uniform float colorMix = 1.0;

varying vec3 vertex_local;

void vertex() {
	float shift = texture(noize, vec2(sin(VERTEX.x + time), VERTEX.y)).x;
	shift += texture(noize, VERTEX.zy).x;
	//shift += (sin(time + VERTEX.x) + sin(time + VERTEX.y) + sin(time + VERTEX.z))*0.5;
	VERTEX.xyz *= shift;
	VERTEX.xyz += flashDirection*shift;
	//VERTEX.x *= (1.0 - sin(time*VERTEX.x)/5.0);
	//VERTEX.y *= (1.0 - sin(time*VERTEX.y)/5.0);
	//VERTEX.z *= (1.0 - sin(time*VERTEX.z)/5.0);
	vertex_local = VERTEX;
}

void fragment() {
	vec3 ret = mix(color1, color2, vertex_local.x/size + colorMix);
	//vec3 tex = texture(noize, VERTEX.xy).rgb;
	ALBEDO = ret;
	//float len = length(ret);
	//ALBEDO = ret += tex;
	//ALPHA = (len - 0.5)*len;
}

"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/time = null
shader_param/flashDirection = null
shader_param/color1 = null
shader_param/color2 = null
shader_param/size = 2.0
shader_param/colorMix = 1.0
shader_param/noize = SubResource( 3 )
